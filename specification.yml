openapi: 3.0.3
info:
  title: External User Management API
  version: 1.0.0
  description: API for managing user information

servers:
  - url: https://api.workos.com
paths:
  /user_management/users:
    get:
      summary: Get all users
      operationId: listUsers
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: The maximum number of users to return
        - name: before
          in: query
          schema:
            type: string
          description: The user id to use as a cursor for pagination
        - name: after
          in: query
          schema:
            type: string
          description: The user id to use as a cursor for pagination
        - name: order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: The order to return users in
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  list_metadata:
                    type: object
                    properties:
                      before:
                        type: string
                        description: The user id to use as a cursor for pagination
                        example: user_01E4ZCR3C56J083X43JQXF3JK5
                      after:
                        type: string
                        description: The user id to use as a cursor for pagination
                        example: user_01E4ZCR3C56J083X43JQXF3JK5
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /user_management/users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUser
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    put:
      summary: Update a user by ID
      operationId: updateUser
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
  /user_management/users/{id}/email_verification/send:
    post:
      summary: Send a verification email
      operationId: sendVerificationEmail
      tags:
        - Users
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sent verification email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '429':
          description: Too many requests
        '500':
          description: Internal server error
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        password:
          type: string
          description: The user's password
        first_name:
          type: string
          description: The user's first name
        last_name:
          type: string
          description: The user's last name
        email_verified:
          type: boolean
          description: Whether the user's email address has been verified
          default: false
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        first_name:
          type: string
          description: The user's first name
        last_name:
          type: string
          description: The user's last name
        email_verified:
          type: boolean
          description: Whether the user's email address has been verified
          default: false
        password:
          type: string
          description: The user's password
    User:
      type: object
      required:
        - id
        - email
        - email_verified
        - created_at
        - updated_at
      properties:
        object:
          type: string
          description: The object type
          default: user
        id:
          type: string
          description: The user's unique identifier
        email:
          type: string
          format: email
          description: The user's email address
        first_name:
          type: string
          description: The user's first name
        last_name:
          type: string
          description: The user's last name
        email_verified:
          type: boolean
          description: Whether the user's email address has been verified
          default: false
        profile_picture_url:
          type: string
          format: uri
          description: The URL of the user's profile picture
        created_at:
          type: string
          format: date-time
          description: The date and time the user was created
        updated_at:
          type: string
          format: date-time
          description: The date and time the user was last updated
