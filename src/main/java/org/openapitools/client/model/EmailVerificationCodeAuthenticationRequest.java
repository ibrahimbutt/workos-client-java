/*
 * External User Management API
 * API for managing user information
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EmailVerificationCodeAuthenticationRequest
 */
@JsonPropertyOrder({
  EmailVerificationCodeAuthenticationRequest.JSON_PROPERTY_CLIENT_ID,
  EmailVerificationCodeAuthenticationRequest.JSON_PROPERTY_CLIENT_SECRET,
  EmailVerificationCodeAuthenticationRequest.JSON_PROPERTY_CODE,
  EmailVerificationCodeAuthenticationRequest.JSON_PROPERTY_PENDING_AUTHENTICATION_TOKEN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmailVerificationCodeAuthenticationRequest {
  public static final String JSON_PROPERTY_CLIENT_ID = "client_id";
  private String clientId;

  public static final String JSON_PROPERTY_CLIENT_SECRET = "client_secret";
  private String clientSecret;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_PENDING_AUTHENTICATION_TOKEN = "pending_authentication_token";
  private String pendingAuthenticationToken;

  public EmailVerificationCodeAuthenticationRequest() {
  }

  public EmailVerificationCodeAuthenticationRequest clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The client id of the application
   * @return clientId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClientId() {
    return clientId;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public EmailVerificationCodeAuthenticationRequest clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The client secret of the application
   * @return clientSecret
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClientSecret() {
    return clientSecret;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public EmailVerificationCodeAuthenticationRequest code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The verification code sent to the user&#39;s email address
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public EmailVerificationCodeAuthenticationRequest pendingAuthenticationToken(String pendingAuthenticationToken) {
    
    this.pendingAuthenticationToken = pendingAuthenticationToken;
    return this;
  }

   /**
   * The pending authentication token
   * @return pendingAuthenticationToken
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PENDING_AUTHENTICATION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPendingAuthenticationToken() {
    return pendingAuthenticationToken;
  }


  @JsonProperty(JSON_PROPERTY_PENDING_AUTHENTICATION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPendingAuthenticationToken(String pendingAuthenticationToken) {
    this.pendingAuthenticationToken = pendingAuthenticationToken;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailVerificationCodeAuthenticationRequest emailVerificationCodeAuthenticationRequest = (EmailVerificationCodeAuthenticationRequest) o;
    return Objects.equals(this.clientId, emailVerificationCodeAuthenticationRequest.clientId) &&
        Objects.equals(this.clientSecret, emailVerificationCodeAuthenticationRequest.clientSecret) &&
        Objects.equals(this.code, emailVerificationCodeAuthenticationRequest.code) &&
        Objects.equals(this.pendingAuthenticationToken, emailVerificationCodeAuthenticationRequest.pendingAuthenticationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, code, pendingAuthenticationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailVerificationCodeAuthenticationRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    pendingAuthenticationToken: ").append(toIndentedString(pendingAuthenticationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

