openapi: 3.0.3
info:
  description: API for managing user information
  title: External User Management API
  version: 1.0.0
servers:
- url: https://api.workos.com
paths:
  /user_management/authenticate:
    post:
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticateUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserResponse'
          description: User authenticated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      summary: Authenticate a user
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /user_management/users:
    get:
      operationId: listUsers
      parameters:
      - description: The maximum number of users to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The user id to use as a cursor for pagination
        explode: true
        in: query
        name: before
        required: false
        schema:
          type: string
        style: form
      - description: The user id to use as a cursor for pagination
        explode: true
        in: query
        name: after
        required: false
        schema:
          type: string
        style: form
      - description: The order to return users in
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUsers_200_response'
          description: A list of users
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
      x-accepts: application/json
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /user_management/users/{id}:
    delete:
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - Users
      x-accepts: application/json
    get:
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User found
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - Users
      x-accepts: application/json
    put:
      operationId: updateUser
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User updated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Update a user by ID
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /user_management/users/{id}/email_verification/send:
    post:
      operationId: sendVerificationEmail
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserResponse'
          description: Sent verification email successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Send a verification email
      tags:
      - Users
      x-accepts: application/json
  /user_management/users/{id}/email_verification/confirm:
    post:
      operationId: confirmEmail
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/confirmEmail_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatedUserResponse'
          description: Confirmed email address successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
        "429":
          description: Too many requests
        "500":
          description: Internal server error
      summary: Confirm a user's email address
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    PasswordAuthenticationRequest:
      properties:
        client_id:
          description: The client id of the application
          type: string
        client_secret:
          description: The client secret of the application
          type: string
        grant_type:
          description: The grant type of the application
          enum:
          - password
          type: string
        email:
          description: The user's email address
          format: email
          type: string
        password:
          description: The user's password
          type: string
      required:
      - client_id
      - client_secret
      - email
      - password
      type: object
    EmailVerificationCodeAuthenticationRequest:
      properties:
        client_id:
          description: The client id of the application
          type: string
        client_secret:
          description: The client secret of the application
          type: string
        code:
          description: The verification code sent to the user's email address
          type: string
        pending_authentication_token:
          description: The pending authentication token
          type: string
      required:
      - client_id
      - client_secret
      - code
      - pending_authentication_token
      type: object
    CreateUserRequest:
      example:
        password: password
        email_verified: false
        last_name: last_name
        first_name: first_name
        email: email
      properties:
        email:
          description: The user's email address
          format: email
          type: string
        password:
          description: The user's password
          type: string
        first_name:
          description: The user's first name
          type: string
        last_name:
          description: The user's last name
          type: string
        email_verified:
          default: false
          description: Whether the user's email address has been verified
          type: boolean
      required:
      - email
      - first_name
      - last_name
      - password
      type: object
    UpdateUserRequest:
      example:
        password: password
        email_verified: false
        last_name: last_name
        first_name: first_name
        email: email
      properties:
        email:
          description: The user's email address
          format: email
          type: string
        first_name:
          description: The user's first name
          type: string
        last_name:
          description: The user's last name
          type: string
        email_verified:
          default: false
          description: Whether the user's email address has been verified
          type: boolean
        password:
          description: The user's password
          type: string
      type: object
    User:
      example:
        email_verified: false
        updated_at: 2000-01-23T04:56:07.000+00:00
        profile_picture_url: https://openapi-generator.tech
        last_name: last_name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: id
        first_name: first_name
        email: email
        object: user
      properties:
        object:
          default: user
          description: The object type
          type: string
        id:
          description: The user's unique identifier
          type: string
        email:
          description: The user's email address
          format: email
          type: string
        first_name:
          description: The user's first name
          type: string
        last_name:
          description: The user's last name
          type: string
        email_verified:
          default: false
          description: Whether the user's email address has been verified
          type: boolean
        profile_picture_url:
          description: The URL of the user's profile picture
          format: uri
          type: string
        created_at:
          description: The date and time the user was created
          format: date-time
          type: string
        updated_at:
          description: The date and time the user was last updated
          format: date-time
          type: string
      required:
      - created_at
      - email
      - email_verified
      - id
      - updated_at
      type: object
    AuthenticatedUserResponse:
      example:
        user:
          email_verified: false
          updated_at: 2000-01-23T04:56:07.000+00:00
          profile_picture_url: https://openapi-generator.tech
          last_name: last_name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          first_name: first_name
          email: email
          object: user
      properties:
        user:
          $ref: '#/components/schemas/User'
    EmailVerificationRequiredResponse:
      properties:
        code:
          type: string
        message:
          type: string
        email:
          format: email
          type: string
        pending_authentication_token:
          type: string
      type: object
    authenticateUser_request:
      oneOf:
      - $ref: '#/components/schemas/PasswordAuthenticationRequest'
      - $ref: '#/components/schemas/EmailVerificationCodeAuthenticationRequest'
    listUsers_200_response_list_metadata:
      example:
        before: user_01E4ZCR3C56J083X43JQXF3JK5
        after: user_01E4ZCR3C56J083X43JQXF3JK5
      properties:
        before:
          description: The user id to use as a cursor for pagination
          example: user_01E4ZCR3C56J083X43JQXF3JK5
          type: string
        after:
          description: The user id to use as a cursor for pagination
          example: user_01E4ZCR3C56J083X43JQXF3JK5
          type: string
      type: object
    listUsers_200_response:
      example:
        data:
        - email_verified: false
          updated_at: 2000-01-23T04:56:07.000+00:00
          profile_picture_url: https://openapi-generator.tech
          last_name: last_name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          first_name: first_name
          email: email
          object: user
        - email_verified: false
          updated_at: 2000-01-23T04:56:07.000+00:00
          profile_picture_url: https://openapi-generator.tech
          last_name: last_name
          created_at: 2000-01-23T04:56:07.000+00:00
          id: id
          first_name: first_name
          email: email
          object: user
        list_metadata:
          before: user_01E4ZCR3C56J083X43JQXF3JK5
          after: user_01E4ZCR3C56J083X43JQXF3JK5
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
        list_metadata:
          $ref: '#/components/schemas/listUsers_200_response_list_metadata'
      type: object
    confirmEmail_request:
      properties:
        code:
          description: The verification code sent to the user's email address
          type: string
      type: object
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http

